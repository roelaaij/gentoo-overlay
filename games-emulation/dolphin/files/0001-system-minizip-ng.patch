From 07deab1d518d94e0aa9298c1469f5a63910589ab Mon Sep 17 00:00:00 2001
From: Roel Aaij <roel.aaij@gmail.com>
Date: Thu, 21 Nov 2024 12:54:23 +0100
Subject: [PATCH] system minizip-ng

---
 CMakeLists.txt                        |  6 ++++--
 Source/Core/Common/Hash.cpp           |  8 ++++----
 Source/Core/DiscIO/CompressedBlob.cpp | 20 ++++++++++----------
 3 files changed, 18 insertions(+), 16 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 636d5473e3..2d3d270b06 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -672,10 +672,12 @@ dolphin_make_imported_target_if_missing(LibLZMA::LibLZMA LIBLZMA)
 
 dolphin_find_optional_system_library_pkgconfig(ZSTD libzstd>=1.4.0 zstd::zstd Externals/zstd)
 
-add_subdirectory(Externals/zlib-ng)
+dolphin_find_optional_system_library_pkgconfig(ZLIBNG
+  "zlib-ng>=2.1.5" ZLIB::ZLIB Externals/zlib-ng
+)
 
 dolphin_find_optional_system_library_pkgconfig(MINIZIP
-  "minizip>=4.0.4" minizip::minizip Externals/minizip-ng
+  "minizip-ng>=4.0.4" minizip::minizip Externals/minizip-ng
 )
 
 dolphin_find_optional_system_library(LZO Externals/LZO)
diff --git a/Source/Core/Common/Hash.cpp b/Source/Core/Common/Hash.cpp
index 8cb697b695..9b7472bc22 100644
--- a/Source/Core/Common/Hash.cpp
+++ b/Source/Core/Common/Hash.cpp
@@ -7,7 +7,7 @@
 #include <bit>
 #include <cstring>
 
-#include <zlib.h>
+#include <zlib-ng.h>
 
 #include "Common/BitUtils.h"
 #include "Common/CPUDetect.h"
@@ -27,7 +27,7 @@ namespace Common
 u32 HashAdler32(const u8* data, size_t len)
 {
   // Use fast implementation from zlib-ng
-  return adler32_z(1, data, len);
+  return zng_adler32_z(1, data, len);
 }
 
 // Stupid hash - but can't go back now :)
@@ -429,12 +429,12 @@ u64 GetHash64(const u8* src, u32 len, u32 samples)
 
 u32 StartCRC32()
 {
-  return crc32_z(0L, Z_NULL, 0);
+  return zng_crc32_z(0L, Z_NULL, 0);
 }
 
 u32 UpdateCRC32(u32 crc, const u8* data, size_t len)
 {
-  return crc32_z(crc, data, len);
+  return zng_crc32_z(crc, data, len);
 }
 
 u32 ComputeCRC32(const u8* data, size_t len)
diff --git a/Source/Core/DiscIO/CompressedBlob.cpp b/Source/Core/DiscIO/CompressedBlob.cpp
index fccb3928d1..44a6b10863 100644
--- a/Source/Core/DiscIO/CompressedBlob.cpp
+++ b/Source/Core/DiscIO/CompressedBlob.cpp
@@ -11,7 +11,7 @@
 #include <utility>
 #include <vector>
 
-#include <zlib.h>
+#include <zlib-ng.h>
 
 #ifdef _WIN32
 #include <windows.h>
@@ -134,7 +134,7 @@ bool CompressedBlobReader::GetBlock(u64 block_num, u8* out_ptr)
   }
   else
   {
-    z_stream z = {};
+    zng_stream z = {};
     z.next_in = m_zlib_buffer.data();
     z.avail_in = comp_block_size;
     if (z.avail_in > m_header.block_size)
@@ -143,8 +143,8 @@ bool CompressedBlobReader::GetBlock(u64 block_num, u8* out_ptr)
     }
     z.next_out = out_ptr;
     z.avail_out = m_header.block_size;
-    inflateInit(&z);
-    int status = inflate(&z, Z_FULL_FLUSH);
+    zng_inflateInit(&z);
+    int status = zng_inflate(&z, Z_FULL_FLUSH);
     u32 uncomp_size = m_header.block_size - z.avail_out;
     if (status != Z_STREAM_END)
     {
@@ -152,7 +152,7 @@ bool CompressedBlobReader::GetBlock(u64 block_num, u8* out_ptr)
       // to be sure, don't use compressed isos :P
       ERROR_LOG_FMT(DISCIO, "Failure reading block {} - out of data and not at end.", block_num);
     }
-    inflateEnd(&z);
+    zng_inflateEnd(&z);
     if (uncomp_size != m_header.block_size)
     {
       ERROR_LOG_FMT(DISCIO, "Wrong block size");
@@ -165,7 +165,7 @@ bool CompressedBlobReader::GetBlock(u64 block_num, u8* out_ptr)
 struct CompressThreadState
 {
   CompressThreadState() : z{} {}
-  ~CompressThreadState() { deflateEnd(&z); }
+  ~CompressThreadState() { zng_deflateEnd(&z); }
 
   // z_stream will stop working if it changes address, so this object must not be moved
   CompressThreadState(const CompressThreadState&) = delete;
@@ -174,7 +174,7 @@ struct CompressThreadState
   CompressThreadState& operator=(CompressThreadState&&) = delete;
 
   std::vector<u8> compressed_buffer;
-  z_stream z;
+  zng_stream z;
 };
 
 struct CompressParameters
@@ -194,7 +194,7 @@ struct OutputParameters
 
 static ConversionResultCode SetUpCompressThreadState(CompressThreadState* state)
 {
-  return deflateInit(&state->z, 9) == Z_OK ? ConversionResultCode::Success :
+  return zng_deflateInit(&state->z, 9) == Z_OK ? ConversionResultCode::Success :
                                              ConversionResultCode::InternalError;
 }
 
@@ -205,7 +205,7 @@ static ConversionResult<OutputParameters> Compress(CompressThreadState* state,
 {
   state->compressed_buffer.resize(block_size);
 
-  int retval = deflateReset(&state->z);
+  int retval = zng_deflateReset(&state->z);
   state->z.next_in = parameters.data.data();
   state->z.avail_in = block_size;
   state->z.next_out = state->compressed_buffer.data();
@@ -217,7 +217,7 @@ static ConversionResult<OutputParameters> Compress(CompressThreadState* state,
     return ConversionResultCode::InternalError;
   }
 
-  const int status = deflate(&state->z, Z_FINISH);
+  const int status = zng_deflate(&state->z, Z_FINISH);
 
   state->compressed_buffer.resize(block_size - state->z.avail_out);
 
-- 
2.47.0

