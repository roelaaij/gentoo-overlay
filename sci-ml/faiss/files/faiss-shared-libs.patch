From 787fe7e0f60d85e6efb686910870fbab5fae605f Mon Sep 17 00:00:00 2001
From: Roel Aaij <roel.aaij@nikhef.nl>
Date: Wed, 19 Feb 2025 20:59:06 +0100
Subject: [PATCH] Use shared libraries and fix the build

---
 CMakeLists.txt              | 38 ++++++++++++++++++++++++++++++++-
 faiss/CMakeLists.txt        | 10 ++++-----
 faiss/gpu/CMakeLists.txt    | 42 ++++++++++++++++++++++---------------
 faiss/python/CMakeLists.txt |  1 +
 perf_tests/CMakeLists.txt   | 17 ++++++++-------
 tests/CMakeLists.txt        | 34 +++++++++++++++++-------------
 6 files changed, 97 insertions(+), 45 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 4a70aafa..505e8660 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -77,9 +77,45 @@ if(FAISS_ENABLE_GPU)
     set(GPU_EXT_PREFIX "hip")
     execute_process(COMMAND ${PROJECT_SOURCE_DIR}/faiss/gpu/hipify.sh)
   else ()
-    set(CMAKE_CUDA_HOST_COMPILER ${CMAKE_CXX_COMPILER})
     enable_language(CUDA)
     set(GPU_EXT_PREFIX "cu")
+
+    if (CMAKE_CUDA_HOST_COMPILER)
+      function(get_compiler_version compiler output_var)
+        execute_process(COMMAND ${compiler} --version OUTPUT_VARIABLE version_stdout)
+        string(REGEX REPLACE "\n.*" "" version_str ${version_stdout})
+        string(REGEX MATCHALL "([0-9]+\\.[0-9]+\\.[0-9]+)" versions ${version_str})
+        list(LENGTH versions n_versions)
+        math(EXPR last_version "${n_versions}-1")
+        list(GET versions ${last_version} version)
+        set(${output_var} ${version} PARENT_SCOPE)
+      endfunction()
+
+      get_compiler_version(${CMAKE_CUDA_HOST_COMPILER} CHC_VERSION)
+      get_compiler_version(${CMAKE_CXX_COMPILER} CXX_VERSION)
+      if (${CHC_VERSION} VERSION_LESS ${CXX_VERSION})
+        string(FIND ${CMAKE_CUDA_HOST_COMPILER} "clang" HOST_CC_CLANG)
+        if (HOST_CC_CLANG EQUAL -1)
+          execute_process(COMMAND ${CMAKE_CUDA_HOST_COMPILER} -print-search-dirs OUTPUT_VARIABLE CHC_SEARCH_DIRS)
+          string(REGEX REPLACE "\n" ";" CHC_DIRS ${CHC_SEARCH_DIRS})
+          list(GET CHC_DIRS 0 CHC_IDIR)
+          string(REGEX REPLACE "install:[ ]*" "" CHC_IDIR_REL ${CHC_IDIR})
+        else()
+          execute_process(COMMAND ${CMAKE_CUDA_HOST_COMPILER} -print-resource-dir OUTPUT_VARIABLE CHC_IDIR_REL)
+        endif()
+        execute_process(COMMAND realpath ${CHC_IDIR_REL} OUTPUT_VARIABLE CHC_IDIR_REAL)
+        string(REGEX REPLACE "\n" "" CHC_IDIR ${CHC_IDIR_REAL})
+        message(DEBUG "Host compiler dir: ${CHC_IDIR}")
+        foreach (CHC_LINK_DIR ${CMAKE_CUDA_IMPLICIT_LINK_DIRECTORIES})
+          string(FIND ${CHC_LINK_DIR} ${CHC_IDIR} CHC_IDIR_FOUND)
+          message(VERBOSE "Link dir: ${CHC_LINK_DIR}")
+          if (NOT CHC_IDIR_FOUND EQUAL -1)
+            list(REMOVE_ITEM CMAKE_CUDA_IMPLICIT_LINK_DIRECTORIES ${CHC_LINK_DIR})
+            message(DEBUG "Removing from CUDA link dirs: ${CHC_LINK_DIR}")
+          endif()
+        endforeach()
+      endif()
+    endif()
   endif()
 endif()
 
diff --git a/faiss/CMakeLists.txt b/faiss/CMakeLists.txt
index d8bf74ac..63877967 100644
--- a/faiss/CMakeLists.txt
+++ b/faiss/CMakeLists.txt
@@ -241,9 +241,9 @@ endif()
 # Export FAISS_HEADERS variable to parent scope.
 set(FAISS_HEADERS ${FAISS_HEADERS} PARENT_SCOPE)
 
-add_library(faiss ${FAISS_SRC})
+add_library(faiss SHARED ${FAISS_SRC})
 
-add_library(faiss_avx2 ${FAISS_SRC})
+add_library(faiss_avx2 SHARED ${FAISS_SRC})
 if(NOT FAISS_OPT_LEVEL STREQUAL "avx2" AND NOT FAISS_OPT_LEVEL STREQUAL "avx512" AND NOT FAISS_OPT_LEVEL STREQUAL "avx512_spr")
   set_target_properties(faiss_avx2 PROPERTIES EXCLUDE_FROM_ALL TRUE)
 endif()
@@ -259,7 +259,7 @@ else()
   add_compile_options(/bigobj)
 endif()
 
-add_library(faiss_avx512 ${FAISS_SRC})
+add_library(faiss_avx512 SHARED ${FAISS_SRC})
 if(NOT FAISS_OPT_LEVEL STREQUAL "avx512")
   set_target_properties(faiss_avx512 PROPERTIES EXCLUDE_FROM_ALL TRUE)
 endif()
@@ -273,7 +273,7 @@ else()
   add_compile_options(/bigobj)
 endif()
 
-add_library(faiss_avx512_spr ${FAISS_SRC})
+add_library(faiss_avx512_spr SHARED ${FAISS_SRC})
 if(NOT FAISS_OPT_LEVEL STREQUAL "avx512_spr")
   set_target_properties(faiss_avx512_spr PROPERTIES EXCLUDE_FROM_ALL TRUE)
 endif()
@@ -287,7 +287,7 @@ else()
   add_compile_options(/bigobj)
 endif()
 
-add_library(faiss_sve ${FAISS_SRC})
+add_library(faiss_sve SHARED ${FAISS_SRC})
 if(NOT FAISS_OPT_LEVEL STREQUAL "sve")
   set_target_properties(faiss_sve PROPERTIES EXCLUDE_FROM_ALL TRUE)
 endif()
diff --git a/faiss/gpu/CMakeLists.txt b/faiss/gpu/CMakeLists.txt
index 04d28907..f7cdffc9 100644
--- a/faiss/gpu/CMakeLists.txt
+++ b/faiss/gpu/CMakeLists.txt
@@ -258,7 +258,7 @@ if(FAISS_ENABLE_CUVS)
           utils/CuvsUtils.cu)
 endif()
 
-add_library(faiss_gpu STATIC ${FAISS_GPU_SRC})
+add_library(faiss_gpu SHARED ${FAISS_GPU_SRC})
 set_target_properties(faiss_gpu PROPERTIES
   POSITION_INDEPENDENT_CODE ON
   WINDOWS_EXPORT_ALL_SYMBOLS ON
@@ -308,11 +308,11 @@ endif()
 # Export FAISS_GPU_HEADERS variable to parent scope.
 set(FAISS_GPU_HEADERS ${FAISS_GPU_HEADERS} PARENT_SCOPE)
 
-target_link_libraries(faiss PRIVATE  "$<LINK_LIBRARY:WHOLE_ARCHIVE,faiss_gpu>")
-target_link_libraries(faiss_avx2 PRIVATE "$<LINK_LIBRARY:WHOLE_ARCHIVE,faiss_gpu>")
-target_link_libraries(faiss_avx512 PRIVATE "$<LINK_LIBRARY:WHOLE_ARCHIVE,faiss_gpu>")
-target_link_libraries(faiss_avx512_spr PRIVATE "$<LINK_LIBRARY:WHOLE_ARCHIVE,faiss_gpu>")
-target_link_libraries(faiss_sve PRIVATE "$<LINK_LIBRARY:WHOLE_ARCHIVE,faiss_gpu>")
+target_link_libraries(faiss PUBLIC faiss_gpu)
+target_link_libraries(faiss_avx2 PUBLIC faiss_gpu)
+target_link_libraries(faiss_avx512 PUBLIC faiss_gpu)
+target_link_libraries(faiss_avx512_spr PUBLIC faiss_gpu)
+target_link_libraries(faiss_sve PUBLIC faiss_gpu)
 
 foreach(header ${FAISS_GPU_HEADERS})
   get_filename_component(dir ${header} DIRECTORY )
@@ -328,17 +328,17 @@ else()
   # Prepares a host linker script and enables host linker to support
   # very large device object files.
   # This is what CUDA 11.5+ `nvcc -hls=gen-lcs -aug-hls` would generate
-  file(WRITE "${CMAKE_CURRENT_BINARY_DIR}/fatbin.ld"
-  [=[
-  SECTIONS
-  {
-    .nvFatBinSegment : { *(.nvFatBinSegment) }
-    __nv_relfatbin : { *(__nv_relfatbin) }
-    .nv_fatbin : { *(.nv_fatbin) }
-  }
-  ]=]
-  )
-  target_link_options(faiss_gpu PRIVATE "${CMAKE_CURRENT_BINARY_DIR}/fatbin.ld")
+  # file(WRITE "${CMAKE_CURRENT_BINARY_DIR}/fatbin.ld"
+  # [=[
+  # SECTIONS
+  # {
+  #   .nvFatBinSegment : { *(.nvFatBinSegment) }
+  #   __nv_relfatbin : { *(__nv_relfatbin) }
+  #   .nv_fatbin : { *(.nv_fatbin) }
+  # }
+  # ]=]
+  # )
+  # target_link_options(faiss_gpu PRIVATE "${CMAKE_CURRENT_BINARY_DIR}/fatbin.ld")
 
 
   find_package(CUDAToolkit REQUIRED)
@@ -348,3 +348,11 @@ else()
     --expt-extended-lambda --expt-relaxed-constexpr
     $<$<BOOL:${FAISS_ENABLE_CUVS}>:-Xcompiler=${OpenMP_CXX_FLAGS}>>)
 endif()
+
+install(TARGETS faiss_gpu
+  EXPORT faiss-targets
+  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
+)
diff --git a/faiss/python/CMakeLists.txt b/faiss/python/CMakeLists.txt
index 3fc46f4c..a29cf0b8 100644
--- a/faiss/python/CMakeLists.txt
+++ b/faiss/python/CMakeLists.txt
@@ -263,6 +263,7 @@ target_link_libraries(swigfaiss_sve PRIVATE
 )
 
 target_link_libraries(faiss_example_external_module PRIVATE
+  Python::Python
   Python::Module
   Python::NumPy
   OpenMP::OpenMP_CXX
diff --git a/perf_tests/CMakeLists.txt b/perf_tests/CMakeLists.txt
index e89d1157..d38c894b 100644
--- a/perf_tests/CMakeLists.txt
+++ b/perf_tests/CMakeLists.txt
@@ -7,13 +7,16 @@
 project(faiss_perf_tests)
 set(BENCHMARK_ENABLE_TESTING OFF)
 
-include(FetchContent)
-FetchContent_Declare(googlebenchmark
-        GIT_REPOSITORY https://github.com/google/benchmark.git
-        GIT_TAG main) # need main for benchmark::benchmark
-FetchContent_MakeAvailable(
-  googlebenchmark)
-
+if (USE_SYSTEM_GTEST)
+  find_package(benchmark CONFIG REQUIRED)
+else()
+  include(FetchContent)
+  FetchContent_Declare(googlebenchmark
+    GIT_REPOSITORY https://github.com/google/benchmark.git
+    GIT_TAG main) # need main for benchmark::benchmark
+  FetchContent_MakeAvailable(
+    googlebenchmark)
+endif()
 
 find_package(Threads REQUIRED)
 find_package(OpenMP REQUIRED)
diff --git a/tests/CMakeLists.txt b/tests/CMakeLists.txt
index dfab76e0..94e4c1c6 100644
--- a/tests/CMakeLists.txt
+++ b/tests/CMakeLists.txt
@@ -48,21 +48,24 @@ if (FAISS_ENABLE_PYTHON)
   target_link_libraries(faiss_test PUBLIC faiss_example_external_module)
 endif()
 
-include(FetchContent)
-FetchContent_Declare(
-  googletest
-  GIT_REPOSITORY https://github.com/google/googletest.git
-  GIT_TAG 58d77fa8070e8cec2dc1ed015d66b454c8d78850 # release-1.12.1
-  OVERRIDE_FIND_PACKAGE)
-set(BUILD_GMOCK CACHE BOOL OFF)
-set(INSTALL_GTEST CACHE BOOL OFF)
-FetchContent_MakeAvailable(googletest)
+if (USE_SYSTEM_GTEST)
+  find_package(GTest CONFIG REQUIRED)
+else()
+  include(FetchContent)
+  FetchContent_Declare(
+    googletest
+    GIT_REPOSITORY https://github.com/google/googletest.git
+    GIT_TAG 58d77fa8070e8cec2dc1ed015d66b454c8d78850 # release-1.12.1
+    OVERRIDE_FIND_PACKAGE)
+  set(BUILD_GMOCK CACHE BOOL OFF)
+  set(INSTALL_GTEST CACHE BOOL OFF)
+  FetchContent_MakeAvailable(googletest)
 
-if(NOT EXISTS ${CMAKE_FIND_PACKAGE_REDIRECTS_DIR}/gtest-config.cmake
-   AND NOT EXISTS ${CMAKE_FIND_PACKAGE_REDIRECTS_DIR}/GTestConfig.cmake)
-  file(
-    WRITE ${CMAKE_FIND_PACKAGE_REDIRECTS_DIR}/gtest-config.cmake
-    [=[
+  if(NOT EXISTS ${CMAKE_FIND_PACKAGE_REDIRECTS_DIR}/gtest-config.cmake
+    AND NOT EXISTS ${CMAKE_FIND_PACKAGE_REDIRECTS_DIR}/GTestConfig.cmake)
+    file(
+      WRITE ${CMAKE_FIND_PACKAGE_REDIRECTS_DIR}/gtest-config.cmake
+      [=[
 include(CMakeFindDependencyMacro)
 find_dependency(googletest)
 if(NOT TARGET GTest::GTest)
@@ -74,10 +77,11 @@ if(NOT TARGET GTest::Main)
   target_link_libraries(GTest::Main INTERFACE GTest::gtest_main)
 endif()
 ]=])
+  endif()
+  find_package(GTest CONFIG REQUIRED)
 endif()
 
 find_package(OpenMP REQUIRED)
-find_package(GTest CONFIG REQUIRED)
 
 target_link_libraries(faiss_test PRIVATE
   OpenMP::OpenMP_CXX
-- 
2.48.1

